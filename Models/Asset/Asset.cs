using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using AssetManagement.Models.AssetHolder;
using AssetManagement.Models.AssetRecord;

namespace AssetManagement.Models.Asset
{
    public abstract class Asset : IAsset
    {
        /// <summary>
        /// An event which can be triggered when the status of an asset is updated somehow
        /// </summary>
        public static event Action<Asset, IAssetHolder, AssetState> AssetChanged;

        /// <summary>
        /// The asset's ID provided by the file from AAF.
        /// </summary>
        public string AssetId { get; set; }

        /// <summary>
        /// The internal asset database ID. 
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Mark ID as auto-generated by SQL database
        public string Id { get; private set; }

        public AssetOwnershipHandler Transfer { get; }

        public IAssetRecord LastAssetRecord => (AssetRecords.Count > 0 ? AssetRecords.Last() : null);

        public DateTime LastChanged => LastAssetRecord.Timestamp;

        public IAssetHolder CurrentAssetHolder => LastAssetRecord?.Holder;

        public List<IAssetRecord> AssetRecords { get; } = new List<IAssetRecord>();

        protected Asset()
        {
            Transfer = new AssetOwnershipHandler(this);
            Transfer.AssetOwnershipChanged += (asset, holder, assetState) =>
            {
                AssetChanged?.Invoke(asset, holder, assetState);
            };
        }

        protected Asset(IAssetHolder assetHolder, string assetId) : this()
        {
            AssetId = assetId;
            Transfer.ToUser(assetHolder);
        }

        public void SetState(AssetState state) => AssetChanged?.Invoke(this, CurrentAssetHolder, state);
    }
}